{"ast":null,"code":"import { DateTime } from 'luxon';\nconst API_KEY = \"027ae6bb7537852998940514a02d2767\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + '/' + infoType);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\nconst formatForecastWeather = data => {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, \"ccc\"),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    timezone,\n    daily,\n    hourly\n  };\n};\nconst getFormattedWeatherData = async searchParams => {\n  try {\n    const formattedCurrentWeather = await getWeatherData(\"weather\", searchParams).then(formatCurrentWeather);\n    const {\n      lat,\n      lon\n    } = formattedCurrentWeather;\n    const formattedForecastWeather = await getWeatherData(\"onecall\", {\n      lat,\n      lon,\n      exclude: \"current,minutely,alerts\",\n      units: searchParams.units\n    }).then(formatForecastWeather);\n    return {\n      ...formattedCurrentWeather,\n      ...formattedForecastWeather\n    };\n  } catch (error) {\n    console.error(\"Error fetching or formatting weather data:\", error);\n    // Handle the error gracefully, such as showing an error message to the user.\n    // You can return a default or empty weather data object here if needed.\n  }\n};\n\nconst formatToLocalTime = (secs, zone, format = \"cccc, dd LLL yyyy' | Local Time: 'hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nconst iconURLFromCode = code => 'http://openweathermap.org/img/wn/${code}@2x.png';\nexport default getFormattedWeatherData;\nexport { formatToLocalTime, iconURLFromCode };","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","formatForecastWeather","timezone","daily","hourly","slice","map","d","title","formatToLocalTime","day","getFormattedWeatherData","formattedCurrentWeather","formattedForecastWeather","exclude","units","error","console","secs","zone","format","fromSeconds","setZone","toFormat","iconURLFromCode","code"],"sources":["/Users/muhammadabdullah/Documents/Git/weather-dashboard/react-weather-app/src/services/weatherService.js"],"sourcesContent":["import { DateTime } from 'luxon';\n\nconst API_KEY = \"027ae6bb7537852998940514a02d2767\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\nconst getWeatherData = (infoType, searchParams) => {\n    const url = new URL(BASE_URL + '/' + infoType);\n    url.search = new URLSearchParams({...searchParams, appid:API_KEY});\n\n    return fetch(url).\n    then((res) => res.json());\n};\n\nconst formatCurrentWeather = (data) => {\n    const {\n        coord: { lat, lon },\n        main: {temp, feels_like, temp_min, temp_max, humidity},\n        name,\n        dt,\n        sys: { country, sunrise, sunset },\n        weather,\n        wind: { speed }\n    } = data;\n\n    const { main: details, icon } = weather[0];\n\n    return {\n        lat,\n        lon,\n        temp,\n        feels_like,\n        temp_min,\n        temp_max,\n        humidity,\n        name,\n        dt,\n        country,\n        sunrise,\n        sunset,\n        details,\n        icon,\n        speed,\n    };\n};\n\nconst formatForecastWeather = (data) => {\n    let {timezone, daily, hourly} = data;\n    daily = daily.slice(1, 6).map((d) => {\n        return {\n            title: formatToLocalTime(d.dt, timezone, \"ccc\"),\n            temp: d.temp.day,\n            icon: d.weather[0].icon,\n        };\n    });\n\n    hourly = hourly.slice(1, 6).map((d) => {\n        return {\n            title: formatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n            temp: d.temp.day,\n            icon: d.weather[0].icon,\n        };\n    });\n    return { timezone, daily, hourly };\n};\n\nconst getFormattedWeatherData = async (searchParams) => {\n    try {\n       const formattedCurrentWeather = await getWeatherData(\"weather\", searchParams).then(formatCurrentWeather);\n \n       const { lat, lon } = formattedCurrentWeather;\n \n       const formattedForecastWeather = await getWeatherData(\"onecall\", {\n          lat,\n          lon,\n          exclude: \"current,minutely,alerts\",\n          units: searchParams.units,\n       }).then(formatForecastWeather);\n \n       return { ...formattedCurrentWeather, ...formattedForecastWeather };\n    } catch (error) {\n       console.error(\"Error fetching or formatting weather data:\", error);\n       // Handle the error gracefully, such as showing an error message to the user.\n       // You can return a default or empty weather data object here if needed.\n    }\n };\n\nconst formatToLocalTime = (\n    secs,\n    zone,\n    format = \"cccc, dd LLL yyyy' | Local Time: 'hh:mm a\"\n    ) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\nconst iconURLFromCode = (code) => 'http://openweathermap.org/img/wn/${code}@2x.png';\n\nexport default getFormattedWeatherData;\n\nexport {formatToLocalTime, iconURLFromCode}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}